// Generated by CoffeeScript 1.6.3
(function() {
  var dbg, makePredRouter, _, _defaultOptions,
    __slice = [].slice;

  _ = require("underscore");

  dbg = (function() {
    var _debug;
    _debug = false;
    return function(msg) {
      if (_debug) {
        return console.log(msg);
      }
    };
  })();

  _defaultOptions = {
    errorHandler: function(err) {
      throw err;
    },
    defaultRoute: function(req) {
      throw new Error("No default route provided.");
    }
  };

  makePredRouter = function(options) {
    var arityCheck, output, _handleRouting, _options, _pickRoute, _routes, _useRoute, _useRouteObj;
    if (options != null) {
      _options = _.extend({}, _defaultOptions, options);
    } else {
      _options = _.extend({}, _defaultOptions);
    }
    arityCheck = (function() {
      if (_options.enforceArity != null) {
        return function() {
          var err, params, _paramCount;
          params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _paramCount = _.size(params);
          if (_paramCount !== _options.enforceArity) {
            err = new Error("Not enough parameters passed to router stack: arity enforcement set to " + _options.enforceArity + ", but received " + _paramCount + ".");
            return _options.errorHandler(err);
          }
        };
      } else {
        return function() {};
      }
    })();
    _routes = [];
    _useRouteObj = function(route) {
      return _routes.push(route);
    };
    _useRoute = function(routePredicate, routeHandler) {
      var _route;
      dbg(routePredicate);
      dbg(routeHandler);
      _route = {
        predicate: routePredicate,
        handler: routeHandler
      };
      return _useRouteObj(_route);
    };
    _pickRoute = function(reqs) {
      var predResult, routeCount, _chosenHandler, _it;
      dbg("pickRoute");
      _chosenHandler = false;
      if (_routes.length > 0) {
        routeCount = _routes.length - 1;
        _it = 0;
        while (_it < _routes.length) {
          predResult = _routes[_it].predicate.apply(null, reqs);
          if (predResult) {
            _chosenHandler = _routes[_it];
            break;
          }
          _it++;
        }
      }
      if (!_chosenHandler) {
        if (_options.defaultRoute != null) {
          dbg("defaultRoute");
          _chosenHandler = {
            handler: _options.defaultRoute
          };
        }
      }
      return _chosenHandler;
    };
    _handleRouting = function(reqs) {
      var _routeHandler;
      _routeHandler = _pickRoute(reqs);
      return process.nextTick(function() {
        return _routeHandler.handler.apply(null, reqs);
      });
    };
    return output = {
      handle: _handleRouting,
      use: _useRoute
    };
  };

  module.exports = makePredRouter;

}).call(this);
